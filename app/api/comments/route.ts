import { NextResponse } from "next/server";
import CommentModel from "@/lib/comment-model";
import { dbConnect } from "@/lib/dbConnect";



// X·ª≠ l√Ω POST request: Th√™m comment v√†o database
export async function POST(req: Request) {
    // K·∫øt n·ªëi MongoDB
    await dbConnect();
    try {
        const body = await req.json();
        console.log("üì• Received Data:", body); // üî• Ki·ªÉm tra d·ªØ li·ªáu API nh·∫≠n ƒë∆∞·ª£c

        const { tokenId, username, content } = body;

        // üî• Ki·ªÉm tra xem c√≥ gi√° tr·ªã b·ªã thi·∫øu kh√¥ng
        console.log("Parsed Data:", { tokenId, username, content });

        if (!tokenId || !username || !content) {
            console.error("‚ùå Missing fields:", { tokenId, username, content });
            return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
        }

        await dbConnect();
        const comment = new CommentModel({ tokenId, username, content });
        await comment.save();

        console.log("‚úÖ Saved comment:", comment); // üî• Ki·ªÉm tra comment ƒë√£ l∆∞u th√†nh c√¥ng

        return NextResponse.json(comment, { status: 201 });
    } catch (error) {
        console.error("‚ùå Error saving comment:", error);
        return NextResponse.json({ error: "Server error" }, { status: 500 });
    }
}

// X·ª≠ l√Ω GET request: L·∫•y danh s√°ch comment theo tokenId
export async function GET(req: Request) {
    try {
        const { searchParams } = new URL(req.url);
        const tokenId = searchParams.get("tokenId");

        if (!tokenId) {
            return NextResponse.json({ error: "Missing tokenId" }, { status: 400 });
        }

        const comments = await CommentModel.find({ tokenId }).sort({ createdAt: -1 });

        return NextResponse.json(comments, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "Server error" }, { status: 500 });
    }
}
